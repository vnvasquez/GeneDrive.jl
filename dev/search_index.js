var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API Reference","title":"API Reference","text":"Modules = [GeneDrive]\n\nOrder = [:type, :function]\nPublic = true\nPrivate = false","category":"page"},{"location":"api/#GeneDrive.AdultMortalityAbiodun","page":"API Reference","title":"GeneDrive.AdultMortalityAbiodun","text":"Data for μ_temperature_response. Species: AnophelesGambiae, LifeStage: Pupa. Source: Abiodun et al (2016).\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.AdultMortalityMoustaid","page":"API Reference","title":"GeneDrive.AdultMortalityMoustaid","text":"Data for μ_temperature_response. Species: AedesAegypti, LifeStage: Male, Female. Source: El Moustaid et al (2019).\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.AdultMortalityRossi","page":"API Reference","title":"GeneDrive.AdultMortalityRossi","text":"Data for μ_temperature_response. Species: AedesAegypti, LifeStage: Male, Female. Source: Rossi et al (2014).\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.AedesAegypti","page":"API Reference","title":"GeneDrive.AedesAegypti","text":"struct AedesAegypti <: Species end\n\nData for Aedes Aegypti mosquito. Disease vector.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.AedesAlbopictus","page":"API Reference","title":"GeneDrive.AedesAlbopictus","text":"struct AedesAlbopictus <: Species end\n\nData for Aedes Albopictus mosquito. Disease vector.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.AnophelesArabiensis","page":"API Reference","title":"GeneDrive.AnophelesArabiensis","text":"struct AnophelesArabiensis <: Species end\n\nData for Anopheles Arabiensis mosquito. Disease vector.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.AnophelesGambiae","page":"API Reference","title":"GeneDrive.AnophelesGambiae","text":"struct AnophelesGambiae <: Species end\n\nData for Anopheles Gambiae mosquito. Disease vector.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.ConstantTemperature","page":"API Reference","title":"GeneDrive.ConstantTemperature","text":"mutable struct ConstantTemperature <: Temperature end\n\nData for simulation that features a single constant temperature in °C. Generated internally.\n\nArguments\n\nvalue::Float64: Temperature value in °C; re-used by model at every time step.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.Density","page":"API Reference","title":"GeneDrive.Density","text":"mutable struct Density{D <: DensityDependence}\n    model::Type{D}\n    param::Float64\nend\n\nData for density dependence model.\n\nArguments\n\nmodel::Type{D}: User-selected density dependence formulation. Includes LogisticDensity, LinearDensity, and NoDensity.\nparam::Float64: Calculated internally by init function.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.Drive","page":"API Reference","title":"GeneDrive.Drive","text":"mutable struct Drive{G <: Genotype}\n    genotype::Type{G}\n    likelihood_slice::Array{Float64,2}\n    s::Float64\n    τ::Array{Float64,2}\n    ϕ::Float64\n    ξ_m::Float64\n    ξ_f::Float64\n    ω::Float64\n    β::Float64\n    η::Float64\n    wildtype::Int64\n    modified::Int64\nend\n\nData for individual genotypes.\n\nFields\n\ngenotype::Type{G}: Single genotype.\nlikelihood_slice::Array{Float64,2}: Offspring likelihoods for this genotype.\ns::Float64: Multiplicative fertility modifier.\nτ::Array{Float64,2}: Offspring viability.\nϕ::Float64: Male to female emergence ratio.\nξ_m::Float64: Male pupatory success.\nξ_f::Float64: Female pupatory success.\nω::Float64: Multiplicative adult mortality modifier.\nβ::Float64: Female fecundity.\nη::Float64: Male mating fitness.\nwildtype::Int64: Boolean demarcates homozygous recessive.\nmodified::Int64: Boolean demarcates homozygous modified.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.Egg","page":"API Reference","title":"GeneDrive.Egg","text":"struct Egg <: LifeStage end\n\nEgg life stage. Applicable to holometabolous (complete) or hemimetabolous (partial) metamorphosing insect species.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.EggDurationAbiodun","page":"API Reference","title":"GeneDrive.EggDurationAbiodun","text":"Data for q_temperature_response. Species: AnophelesGambiae, LifeStage: Egg. Source: Abiodun et al (2016).\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.EggDurationMoustaid","page":"API Reference","title":"GeneDrive.EggDurationMoustaid","text":"Data for q_temperature_response. Species: AedesAegypti, LifeStage: Egg. Source: El Moustaid et al (2019).\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.EggDurationRossi","page":"API Reference","title":"GeneDrive.EggDurationRossi","text":"mutable struct EggDurationRossi <: TemperatureResponse\n    a::Float64\n    b::Float64\n    c::Float64\n    d::Float64\n    e::Float64\n    f::Float64\nend\n\nData for q_temperature_response. Species: AedesAegypti, LifeStage:, egg stage. Source: Rossi et al (2014).\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.EggMortalityAbiodun","page":"API Reference","title":"GeneDrive.EggMortalityAbiodun","text":"Data for μ_temperature_response. Species: AnophelesGambiae, LifeStage: Egg. Source: Abiodun et al (2016).\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.EggMortalityMoustaid","page":"API Reference","title":"GeneDrive.EggMortalityMoustaid","text":"Data for μ_temperature_response. Species: AedesAegypti, LifeStage: Egg. Source: El Moustaid et al (2019).\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.EggMortalityRossi","page":"API Reference","title":"GeneDrive.EggMortalityRossi","text":"mutable struct EggMortalityRossi <: TemperatureResponse\n    a::Float64\n    b::Float64\nend\n\nData for μ_temperature_response. Species: AedesAegypti, LifeStage: Egg. Source: Rossi et al (2014).\n\nArguments\n\na::Float64: Death rate at low temperatures, validation range: (0, nothing)\nb::Float64: Influence factor of temperature, validation range: (0, nothing)\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.ExogenousInputs","page":"API Reference","title":"GeneDrive.ExogenousInputs","text":"struct ExogenousInputs\n    intervention::Dict{Symbol, Dict}\n    temperature::Dict{Symbol, Float64}\n    function ExogenousInputs(;\n        intervention = Dict{Symbol, Dict}(),\n        temperature = Dict{Symbol, Float64}())\n        new(intervention,\n        temperature)\n    end\nend\n\nData for perturbations to the simulated system, including (1) biological control interventions and (2) externally defined temperature series/shocks.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.ExogenousInputs-Tuple{Network}","page":"API Reference","title":"GeneDrive.ExogenousInputs","text":"ExogenousInputs(network::Network)\n\nReturn allocated space for exogenous inputs to a Network.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.ExogenousInputs-Tuple{Node}","page":"API Reference","title":"GeneDrive.ExogenousInputs","text":"ExogenousInputs(node::Node)\n\nReturn allocated space for exogenous inputs to Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.Female","page":"API Reference","title":"GeneDrive.Female","text":"struct Female <: LifeStage end\n\nFemale life stage. Applicable to holometabolous (complete) or hemimetabolous (partial) metamorphosing insect species.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.Genetics","page":"API Reference","title":"GeneDrive.Genetics","text":"mutable struct Genetics\n\n    all_genotypes::Array{Drive{<:Genotype}}\n    likelihood::Array{Float64, 3}\n    S::Vector{Float64}\n    Τ::Array{Float64,3}\n    Φ::Vector{Float64}\n    Ξ_m::Vector{Float64}\n    Ξ_f::Vector{Float64}\n    Ω::Vector{Float64}\n    Β::Vector{Float64}\n    Η::Vector{Float64}\n    all_wildtypes::Vector{Int64}\n    all_modified::Vector{Int64}\n\n        function Genetics(all_genotypes::Array{Drive{<:Genotype}})\n\n            gN = length(all_genotypes)\n            likelihood = Array{Float64, 3}(undef, gN, gN, gN)\n            S = Vector{Float64}(undef, gN)\n            Τ = Array{Float64,3}(undef, gN, gN, gN)\n            Φ = Vector{Float64}(undef, gN)\n            Ξ_m = Vector{Float64}(undef, gN)\n            Ξ_f = Vector{Float64}(undef, gN)\n            Ω = Vector{Float64}(undef, gN)\n            Β = Vector{Float64}(undef, gN)\n            Η = Vector{Float64}(undef, gN)\n            all_wildtypes = Vector{Int64}(undef, gN)\n            all_modified = Vector{Int64}(undef, gN)\n\n            for (index, g) in enumerate(all_genotypes)\n                likelihood[:,:,index] = g.likelihood_slice\n                S[index] = g.s\n                Τ[:,:,index] = g.τ\n                Φ[index] = g.ϕ\n                Ξ_m[index] = g.ξ_m\n                Ξ_f[index] = g.ξ_f\n                Ω[index] = g.ω\n                Β[index] = g.β\n                Η[index] = g.η\n                all_wildtypes[index] = g.wildtype\n                all_modified[index] = g.modified\n            end\n\n            new(all_genotypes, likelihood, S, Τ, Φ, Ξ_m, Ξ_f, Ω, Β, Η,\n            all_wildtypes, all_modified)\n\n        end\n\nend\n\nData for all genotypes in a population.\n\nFields\n\nall_genotypes::Array{Drive{<:Genotype}}: All genotypes in a population.\nlikelihood::Array{Float64, 3}: Offspring likelihoods per genotype.\nS::Vector{Float64}: Multiplicative fertility modifier genedata_splitdriveper genotype, applied to oviposition.\nΤ::Array{Float64,3}: Offspring viability per genotype, applied to oviposition.\nΦ::Vector{Float64}: Male to female emergence ratio per genotype.\nΞ_m::Vector{Float64}: Male pupatory success per genotype.\nΞ_f::Vector{Float64}: Female pupatory success per genotype.\nΩ::Vector{Float64}: Multiplicative adult mortality modifier per genotype.\nΒ::Vector{Float64}: Female fecundity per genotype (count of eggs laid).\nΗ::Vector{Float64}: Male mating fitness per genotype.\nall_wildtypes::Vector{Int64}: Collect homozygous wildtype booleans.\nall_modified::Vector{Int64}: Collect homozygous modified booleans.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.Larva","page":"API Reference","title":"GeneDrive.Larva","text":"struct Larva <: LifeStage end\n\nLarva life stage. Also referred to as \"nymph\" life stage. Applicable to holometabolous (complete) or hemimetabolous (partial) metamorphosing insect species.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.LarvaDurationAbiodun","page":"API Reference","title":"GeneDrive.LarvaDurationAbiodun","text":"Data for q_temperature_response. Species: AnophelesGambiae, LifeStage: Larva. Source: Abiodun et al (2016).\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.LarvaDurationMoustaid","page":"API Reference","title":"GeneDrive.LarvaDurationMoustaid","text":"Data for q_temperature_response. Species: AedesAegypti, LifeStage: Larva. Source: El Moustaid et al (2019).\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.LarvaDurationRossi","page":"API Reference","title":"GeneDrive.LarvaDurationRossi","text":"Data for q_temperature_response. Species: AedesAegypti, LifeStage: Larva. Source: Rossi et al (2014).\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.LarvaMortalityAbiodun","page":"API Reference","title":"GeneDrive.LarvaMortalityAbiodun","text":"Data for μ_temperature_response. Species: AnophelesGambiae, LifeStage: Larva. Source: Abiodun et al (2016).\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.LarvaMortalityMoustaid","page":"API Reference","title":"GeneDrive.LarvaMortalityMoustaid","text":"Data for μ_temperature_response. Species: AedesAegypti, LifeStage: Larva. Source: El Moustaid et al (2019).\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.LarvaMortalityRossi","page":"API Reference","title":"GeneDrive.LarvaMortalityRossi","text":"Data for μ_temperature_response. Species: AedesAegypti, LifeStage: Larva. Source: Rossi et al (2014).\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.LinearDensity","page":"API Reference","title":"GeneDrive.LinearDensity","text":"struct LinearDensity <: DensityDependence end\n\nDensity dependence model of type LinearDensity.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.LogisticDensity","page":"API Reference","title":"GeneDrive.LogisticDensity","text":"struct LogisticDensity <: DensityDependence end\n\nDensity dependence model of type LogisticDensity.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.Male","page":"API Reference","title":"GeneDrive.Male","text":"struct Male <: LifeStage end\n\nMale life stage. Applicable to holometabolous (complete) or hemimetabolous (partial) metamorphosing insect species.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.Network","page":"API Reference","title":"GeneDrive.Network","text":"struct Network\n    name::Symbol\n    nodes::DataStructures.OrderedDict{Symbol,Node}\n    migration::DataStructures.OrderedDict{DataType},Array{Matrix{Float64},2}}\n    locations_key_map\nend\n\nData for multiple interconnected spatial nodes.\n\nArguments\n\nname::Symbol: Name of network, usually location-relevant.\nnodes::DataStructures.OrderedDict{Symbol,Node}: Dictionary of data for nodes included in network (metapopulation).\nmigration::DataStructures.OrderedDict{DataType}, Array{Matrix{Float64},2}}: Data defining species, genotype, and stage-specific transition rates. Entries default to zero.\nlocations_key_map: Mapping of node location information. Used to assign transition rates.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.Network-Tuple{Symbol, Vararg{Node}}","page":"API Reference","title":"GeneDrive.Network","text":"Network(name::Symbol, nodes::DataStructures.OrderedDict{Symbol,Node}...)\n\nReturn Network instance containing specified metapopulation information.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.NoDensity","page":"API Reference","title":"GeneDrive.NoDensity","text":"struct NoDensity <: DensityDependence end\n\nDensity dependence model of type NoDensity.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.NoResponse","page":"API Reference","title":"GeneDrive.NoResponse","text":"mutable struct NoResponse <: TemperatureResponse\n    baseline_value::Float64\nend\n\nData for model without temperature response.\n\nArguments:\n\nbaseline_value::Float64: Literature-sourced (rather than dynamically calculated) vital rate parameter.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.Node","page":"API Reference","title":"GeneDrive.Node","text":"mutable struct Node\n    name::Symbol\n    organisms::DataStructures.OrderedDict{Type{<:Species}, Organism}\n    temperature::Temperature\n    location::Tuple{Float64,Float64}\nend\n\nData for a single spatial node.\n\nArguments\n\nname::Symbol: Name of node, usually location-relevant.\norganisms::DataStructures.OrderedDict{Type{<:Species}, Organism}: Dictionary containing data for all species inhabiting node.\ntemperature::Temperature: Climatic specification for temperature.\nlocation::Tuple{Float64,Float64}: Geographic location denoted by coordinates.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.Organism","page":"API Reference","title":"GeneDrive.Organism","text":"mutable struct Organism{S <: Species}\n    gene_data::Genetics\n    all_stages::DataStructures.OrderedDict{Type{<:LifeStage}, Stage}\nend\n\nGeneric data container for species-specific genetic and life stage information.\n\nArguments\n\ngene_data::Genetics: Species and modification-specific genetic data.\nall_stages::DataStructures.OrderedDict{Type{<:LifeStage}, Stage}: Dictionary of wildtype species-specific life stage data.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.ProportionalRelease","page":"API Reference","title":"GeneDrive.ProportionalRelease","text":"mutable struct ProportionalRelease <: Intervention\n    node::Symbol\n    organism::Type{<:Species}\n    stage::Type{<:LifeStage}\n    gene_index::Int64\n    times::Vector{Float64}\n    proportion::Float64\n    callbacks::Vector\n    adults_counting::String\nend\n\nData for biological control interventions predicated on releasing modified organisms.\n\nArguments\n\nnode::Symbol: Node where releases occur.\norganism::Type{<:Species}: Species of organism being released.\nstage::Type{<:LifeStage}: LifeStage of organism being released.\ngene_index::Int64: Genotype being released to implement the intervention.\ntimes::Vector{Float64}: Release time points.\nproportion::Float64: Proportion of modified organisms released during each time period.\ncallbacks::Vector\nadults_to_count::String: The LifeStage of the standing population against which to measure proportional release size. Choices include Male, Female, or All.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.ProportionalRelease-Union{Tuple{T}, Tuple{Node, Any, Type{T}, Any, Vector, Float64, String}} where T<:LifeStage","page":"API Reference","title":"GeneDrive.ProportionalRelease","text":"ProportionalRelease(node::Node, organism, stage::Type{T}, gene_index, times::Vector, proportion::Float64, adult_counting::String) where T <: LifeStage\n\nReturn ProportionalRelease object specifying details of biological control intervention where release size is predicated on real-time wild population level.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.Pupa","page":"API Reference","title":"GeneDrive.Pupa","text":"struct Pupa <: LifeStage end\n\nPupa life stage. Applicable to holometabolous (complete) metamorphosing insect species.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.PupaDurationAbiodun","page":"API Reference","title":"GeneDrive.PupaDurationAbiodun","text":"Data for q_temperature_response. Species: AnophelesGambiae, LifeStage: Pupa. Source: Abiodun et al (2016).\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.PupaDurationMoustaid","page":"API Reference","title":"GeneDrive.PupaDurationMoustaid","text":"Data for q_temperature_response. Species: AedesAegypti, LifeStage: Pupa. Source: El Moustaid et al (2019).\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.PupaDurationRossi","page":"API Reference","title":"GeneDrive.PupaDurationRossi","text":"Data for q_temperature_response. Species: AedesAegypti, LifeStage: Pupa. Source: Rossi et al (2014) and Poletti et al (2011) Table 1.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.PupaMortalityAbiodun","page":"API Reference","title":"GeneDrive.PupaMortalityAbiodun","text":"Data for μ_temperature_response. Species: AnophelesGambiae, LifeStage: Pupa. Source: Abiodun et al (2016).\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.PupaMortalityMoustaid","page":"API Reference","title":"GeneDrive.PupaMortalityMoustaid","text":"Data for μ_temperature_response. Species: AedesAegypti, LifeStage: Pupa. Source: El Moustaid et al (2019).\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.PupaMortalityRossi","page":"API Reference","title":"GeneDrive.PupaMortalityRossi","text":"Data for μ_temperature_response. Species: AedesAegypti, LifeStage: Pupa. Source: Rossi et al (2014).\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.Release","page":"API Reference","title":"GeneDrive.Release","text":"mutable struct Release <: Intervention\n    node::Symbol\n    organism::Type{<:Species}\n    stage::Type{<:LifeStage}\n    gene_index::Int64\n    times::Vector{Float64}\n    values::Vector{Float64}\n    callbacks::Vector\nend\n\nData for biological control interventions predicated on releasing modified organisms. Applicable to both suppression and replacement techniques.\n\nArguments\n\nnode::Symbol: Node where releases occur.\norganism::Type{<:Species}: Species of organism being released.\nstage::Type{<:LifeStage}: Life stage of organism being released.\ngene_index::Int64: Genotype being released to implement the intervention.\ntimes::Vector{Float64}: Release time points.\nvalues::Union{Float64, Vector{Float64}}: Number of modified organisms released during each time period. Variably sized releases permitted.\ncallbacks::Vector\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.Release-Union{Tuple{T}, Tuple{Node, Any, Type{T}, Any, Vector, Int64}} where T<:LifeStage","page":"API Reference","title":"GeneDrive.Release","text":"Release(node::Node, organism, stage, gene, times::Vector, fixed_release::Float64)\n\nReturn Release object specifying details of biological control intervention where release size is fixed over time.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.Release-Union{Tuple{T}, Tuple{Node, Any, Type{T}, Any, Vector, Vector{Int64}}} where T<:LifeStage","page":"API Reference","title":"GeneDrive.Release","text":"Release(node::Node, organism, stage::Type{T}, gene, times::Vector, variable_release::Vector{Float64}) where T <: LifeStage\n\nReturn Release object specifying details of biological control intervention where release size is variable over time.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.ReleaseStrategy","page":"API Reference","title":"GeneDrive.ReleaseStrategy","text":"mutable struct ReleaseStrategy\n    release_this_gene_index::Union{Nothing, Int64}=nothing\n    release_this_life_stage::Union{Nothing, Type{<:LifeStage}, Type{Female}}=nothing\n    release_location_force::Union{Nothing, Bool}=nothing\n    release_start_time::Union{Nothing,Int64}=nothing\n    release_end_time::Union{Nothing,Int64}=nothing\n    release_time_interval::Int64=1\n    release_size_max_per_timestep::Union{Int64,Float64}=9e9\n    release_max_over_timehorizon::Union{Int64,Float64}=9e9\n\nend\n\nData defining the operational constraints for each node.\n\nArguments\n\nrelease_this_gene_index: Gene index to be released. Generally defined by get_homozygous_modified.\nrelease_this_life_stage: Lifestage to be released. Varies according to genetic technology.\nrelease_location_force: Specify locations where releases are obligatory; only applicable when decision model is being run as an MINLP.\nrelease_start_time: Timestep (day) that releases are permitted to start.\nrelease_end_time: Timestep (day) that releases are required to end.\nrelease_time_interval: Minimum timestep interval (in days) permitted for releases.\nrelease_size_max_per_timestep: Maximum number of organisms that may be released on a single day.\nrelease_max_over_timehorizon: Maximum number of organisms that may be released over the problem horizon.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.SinusoidalTemperature","page":"API Reference","title":"GeneDrive.SinusoidalTemperature","text":"mutable struct SinusoidalTemperature <: Temperature\n    a::Float64\n    b::Int64\n    c::Int64\n    d::Float64\nend\n\nData for simulation that features sinusoidal temperature fluctuation in °C. Uses cosine implementation applicable to the Southern Hemisphere. Generated internally.\n\nArguments\n\na::Float64: Amplitude.\nb::Float64: Periodicity coefficient.\nc::Float64: Time period (days).\nd::Float64: Mean.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.Stage","page":"API Reference","title":"GeneDrive.Stage","text":"mutable struct Stage{L <: LifeStage}\n    μ_temperature_response::TemperatureResponse\n    q_temperature_response::TemperatureResponse\n    n::Union{Nothing, Int64}\n    density::Density{<: DensityDependence}\n    dependency::Union{Nothing, Type{<:LifeStage}}\n    N0::Int64\nend\n\nData for life stages. Applies to any organism represented by stage-structured population equations.\n\nArguments\n\nμ_temperature_response::TemperatureResponse: Mortality rate. Responsive to temperature.\nq_temperature_response::TemperatureResponse: Developmental rate. 1/total time (days or portion thereof) spent in stage. Responsive to temperature.\nn::Union{Nothing, Int64}: Number of bins allocated to stage (parameter, Erlang distribution).\ndensity::Density: Specify density dependence model.\ndependency::Union{Nothing, Type{<:LifeStage}}: Organism internal reference, do not modify.\nN0::Int64: Initial stage-specific population count per node. Specify \"0\" for all stages except Female life stage.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.Stage-Union{Tuple{Female}, Tuple{Float64, Int64, Any, Any, Int64}} where Female","page":"API Reference","title":"GeneDrive.Stage","text":"Stage{Female}(μ::Float64, n::Int64, density, dependency, N0::Int64)\n\nReturn Female life stage populated with input data. Not dynamically responsive to temperature. Applicable to holometabolous (complete) or hemimetabolous (partial) metamorphosing insect species.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.Stage-Union{Tuple{Female}, Tuple{TemperatureResponse, Int64, Any, Any, Int64}} where Female","page":"API Reference","title":"GeneDrive.Stage","text":"Stage{Female}(μ::TemperatureResponse, n::Int64, density, dependency, N0::Int64)\n\nReturn Female life stage populated with input data. Dynamically responsive to temperature. Applicable to holometabolous (complete) or hemimetabolous (partial) metamorphosing insect species.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.Stage-Union{Tuple{L}, Tuple{Float64, Float64, Int64, Any, Any, Int64}} where L<:LifeStage","page":"API Reference","title":"GeneDrive.Stage","text":"Stage{L}(μ::Float64, n::Int64, density, dependency, N0::Int64) where {L <: LifeStage}\n\nReturn juvenile life stage populated with input data. Applicable to holometabolous (complete) or hemimetabolous (partial) metamorphosing insect species.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.Stage-Union{Tuple{Male}, Tuple{Float64, Int64, Any, Any, Int64}} where Male","page":"API Reference","title":"GeneDrive.Stage","text":"Stage{Male}(μ::Float64, n::Int64, density, dependency, N0::Int64)\n\nReturn Male life stage populated with input data. Not dynamically responsive to temperature. Applicable to holometabolous (complete) or hemimetabolous (partial) metamorphosing insect species.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.Stage-Union{Tuple{Male}, Tuple{TemperatureResponse, Int64, Any, Any, Int64}} where Male","page":"API Reference","title":"GeneDrive.Stage","text":"Stage{Male}(μ::TemperatureResponse, n::Int64, density, dependency, N0::Int64)\n\nReturn Male life stage populated with input data. Dynamically responsive to temperature. Applicable to holometabolous (complete) or hemimetabolous (partial) metamorphosing insect species.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.TemperatureSeriesData","page":"API Reference","title":"GeneDrive.TemperatureSeriesData","text":"mutable struct TemperatureSeriesData <: ExogenousChange\n    node::Symbol\n    times::Vector{Float64}\n    values::Vector{Float64}\n    set::diffeq.CallbackSet\nend\n\nData for time series of temperature.\n\nArguments\n\nnode::Symbol: Node where temperature is realized.\ntimes::Vector{Float64}: Time step (day) of realized temperature value.\nvalues::Vector{Float64}: Temperature in °C.\nset::diffeq.CallbackSet\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.TemperatureShockData","page":"API Reference","title":"GeneDrive.TemperatureShockData","text":"mutable struct TemperatureShockData <: ExogenousChange\n    node::Symbol\n    times::Vector{Tuple{Float64, Float64}}\n    values::Union{Float64, Vector{Float64}}\n    set::diffeq.CallbackSet\nend\n\nData for temperature shocks.\n\nArguments\n\nnode::Symbol: Node where temperature shock occurs.\ntimes::Vector{Tuple{Float64,Float64}}: Vector of tuples defining shock start/stop time points. Multiple discrete shock periods may be included.\nvalues::Union{Float64, Vector{Float64}}: Single fixed temperature value in °C or vector of variable temperature values in °C added to the baseline temperature during the specified time period. Multiple discrete temperature changes may be included; values may be positive or negative.\nset::diffeq.CallbackSet\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.TemperatureShockData-Tuple{Node, Vector{Tuple{Float64, Float64}}, Float64}","page":"API Reference","title":"GeneDrive.TemperatureShockData","text":"function TemperatureShockData(node::Node, times::Vector{Tuple{Float64,Float64}}, fixed_shock::Float64)\n\nReturn TemperatureShockData instance specifying data for fixed (all the same) shock values.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.TemperatureShockData-Tuple{Node, Vector{Tuple{Float64, Float64}}, Vector{Float64}}","page":"API Reference","title":"GeneDrive.TemperatureShockData","text":"TemperatureShockData(node::Node, times::Vector{Tuple{Float64,Float64}}, variable_shock::Vector{Float64})\n\nReturn TemperatureShockData instance specifying data for variable shock values.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.TimeSeriesTemperature","page":"API Reference","title":"GeneDrive.TimeSeriesTemperature","text":"mutable struct TimeSeriesTemperature <: Temperature end\n\nData for simulation that uses temperature time series in °C.\n\nArguments\n\nvalue::Float64: Time series of temperature values in °C.\n\n\n\n\n\n","category":"type"},{"location":"api/#GeneDrive.assign_migration!-Tuple{Network, Dict, Type{<:Species}}","page":"API Reference","title":"GeneDrive.assign_migration!","text":"assign_migration!(network::Network, migration_data::Dict, species::Type{<:Species})\n\nReturn Network instance with migration field populated by user-specified transition rates.\n\nNote to user:\n\nInput data must be formatted as a nested dictionary. First level denotes relevant life stage and gene, second level includes to/from nodes and transition rate.\nStage and gene combinations not specified by input data retain a default transition rate of zero.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.compute_density-Tuple{Density{LinearDensity}, Any}","page":"API Reference","title":"GeneDrive.compute_density","text":"compute_density(data::Density{LinearDensity}, stage)\n\nReturn the effect of LinearDensity on life stage instance. Calculated each time step.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.compute_density-Tuple{Density{LogisticDensity}, Any}","page":"API Reference","title":"GeneDrive.compute_density","text":"compute_density(data::Density{LogisticDensity}, stage)\n\nReturn the effect of LogisticDensity on life stage instance. Calculated each time step.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.compute_density-Tuple{Density{NoDensity}, Any}","page":"API Reference","title":"GeneDrive.compute_density","text":"compute_density(data::Density{NoDensity}, stage)\n\nReturn the effect of NoDensity on life stage instance. Calculated each time step.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.count_genotypes-Tuple{Genetics}","page":"API Reference","title":"GeneDrive.count_genotypes","text":"count_genotypes(genetics::Genetics)\n\nReturn the total count of genotypes in the Genetics object.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.count_genotypes-Tuple{Network, Symbol, Type{<:Species}}","page":"API Reference","title":"GeneDrive.count_genotypes","text":"count_genotypes(network::Network, node::Symbol, species::Type{<:Species})\n\nReturn the total count of genotypes from Genetics for Species in Node of Network.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.count_genotypes-Tuple{Node, Type{<:Species}}","page":"API Reference","title":"GeneDrive.count_genotypes","text":"count_genotypes(node::Node, species::Type{<:Species})\n\nReturn the total count of genotypes from Genetics for Species in Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.count_nodes-Tuple{Network}","page":"API Reference","title":"GeneDrive.count_nodes","text":"count_nodes(network::Network)\n\nReturn a count of the nodes contained in the Network object.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.count_nodes-Tuple{Node}","page":"API Reference","title":"GeneDrive.count_nodes","text":"count_nodes(node::Node)\n\nReturn 1 (the count of the nodes contained in the Node object).\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.count_organisms-Tuple{Network, Symbol}","page":"API Reference","title":"GeneDrive.count_organisms","text":"count_organisms(network::Network, node::Symbol)\n\nCount the species populating the specified Node of Network.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.count_organisms-Tuple{Node}","page":"API Reference","title":"GeneDrive.count_organisms","text":"count_organisms(node::Node)\n\nCount the species populating Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.count_substages-Tuple{Network, Symbol, Type{<:Species}}","page":"API Reference","title":"GeneDrive.count_substages","text":"count_substages(network::Network, node::Symbol, species::Type{<:Species})\n\nReturn count of the total substages for Species in the specified Node of Network.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.count_substages-Tuple{Node, Type{<:Species}, Type{<:LifeStage}}","page":"API Reference","title":"GeneDrive.count_substages","text":"count_substages(node::Node, species::Type{<:Species}, stage::Type{<:LifeStage})\n\nReturn count of the substages in LifeStage for Species in Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.count_substages-Tuple{Node, Type{<:Species}, Type{Female}}","page":"API Reference","title":"GeneDrive.count_substages","text":"count_substages(node::Node, species::Type{<:Species}, stage::Type{Female})\n\nReturn count of the substages for Species in Node. Specific to the Female lifestage.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.count_substages-Tuple{Node, Type{<:Species}}","page":"API Reference","title":"GeneDrive.count_substages","text":"count_substages(node::Node, species::Type{<:Species})\n\nReturn count of the total substages for Species in Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.create_decision_model-Tuple{Network, Any}","page":"API Reference","title":"GeneDrive.create_decision_model","text":"create_decision_model(network::Network, tspan; node_strategy::Dict, species::Type{<:Species}=AedesAegypti,do_binary::Bool=false, optimizer=nothing)\n\nBuild mathematical program. Problem created as an NLP (dobinary=false) or MINLP (dobinary=true).\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.create_decision_model-Tuple{Node, Any}","page":"API Reference","title":"GeneDrive.create_decision_model","text":"create_decision_model(node::Node, tspan; node_strategy::Dict, species::Type{<:Species}=AedesAegypti,do_binary::Bool=false, optimizer=nothing)\n\nBuild mathematical program. Problem created as an NLP (dobinary=false) or MINLP (dobinary=true). NB: Node is recreated as a Network object internally; this does not change the problem but is relevant for data exploration as it adds one index layer to the formatted results.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.format_decision_model_results-Tuple{Any}","page":"API Reference","title":"GeneDrive.format_decision_model_results","text":"format_decision_model_results(sol)\n\nReturn dictionary containing optimization model results. Indexed per node, organism, life stage, and genotype.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.format_dynamic_model_results-Tuple{Network, Any}","page":"API Reference","title":"GeneDrive.format_dynamic_model_results","text":"format_dynamic_model_results(network::Network, sol)\n\nReturn dictionary containing ODE model results. Indexed per node, organism, life stage, and genotype.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.format_dynamic_model_results-Tuple{Node, Any}","page":"API Reference","title":"GeneDrive.format_dynamic_model_results","text":"format_dynamic_model_results(node::Node, sol)\n\nReturn dictionary containing ODE model results. Indexed per organism, life stage, and genotype.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_density-Tuple{Node, Type{<:Species}, Type{<:LifeStage}}","page":"API Reference","title":"GeneDrive.get_density","text":"get_density(node::Node, species::Type{<:Species}, life_stage::Type{<:LifeStage})\n\nReturn the density dependence model and parameterization for LifeStage of Species in Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_duration-Tuple{Node, Type{<:Species}, Type{<:LifeStage}}","page":"API Reference","title":"GeneDrive.get_duration","text":"get_duration(node::Node, species::Type{<:Species}, life_stage::Type{<:LifeStage})\n\nReturn the temperature-sensitive duration (q_temperature_response) for the LifeStage of Species in Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_exogenous_intervention-Tuple{ExogenousInputs, Node, Any, Any, Any}","page":"API Reference","title":"GeneDrive.get_exogenous_intervention","text":"    function get_exogenous_intervention(inputs::ExogenousInputs, node::Node, organism, stage, gene)\n\nReturns biological control intervention relevant to specified `Node`, `Organism`, `LifeStage`, and `Genotype`.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_exogenous_intervention-Tuple{ExogenousInputs, Node, Any, Type{Female}, Any, Any}","page":"API Reference","title":"GeneDrive.get_exogenous_intervention","text":"get_exogenous_intervention(inputs::ExogenousInputs, node::Node, organism, stage::Type{Female}, gene, female_index)\n\nReturn biological control intervention relevant to Female.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_exogenous_temperature-Tuple{ExogenousInputs, Any}","page":"API Reference","title":"GeneDrive.get_exogenous_temperature","text":"get_exogenous_temperature(inputs::ExogenousInputs, node)\n\nReturn temperature relevant to Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_genetics-Tuple{Network, Symbol, Type{<:Species}}","page":"API Reference","title":"GeneDrive.get_genetics","text":"get_genetics(network::Network, node::Symbol, species::Type{<:Species})\n\nReturn Genetics data for Species in Node of Network.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_genetics-Tuple{Node, Type{<:Species}}","page":"API Reference","title":"GeneDrive.get_genetics","text":"get_genetics(node::Node, species::Type{<:Species})\n\nReturn Genetics data for Species in Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_genotypes-Tuple{Node, Type{<:Species}}","page":"API Reference","title":"GeneDrive.get_genotypes","text":"get_genotypes(node::Node, species::Type{<:Species})\n\nReturn genotype data from Genetics for Species in Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_homozygous_modified-Tuple{Network, Node, Type{<:Species}}","page":"API Reference","title":"GeneDrive.get_homozygous_modified","text":"get_homozygous_modified(network::Network, node::Node, species::Type{<:Species})\n\nReturn the index of the homozygous modified genotype in Genetics for Species in Node of Network.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_homozygous_modified-Tuple{Node, Type{<:Species}}","page":"API Reference","title":"GeneDrive.get_homozygous_modified","text":"get_homozygous_modified(node::Node, species::Type{<:Species})\n\nReturn the index of the homozygous modified genotype in Genetics for Species in Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_initial_temperature-Tuple{Node}","page":"API Reference","title":"GeneDrive.get_initial_temperature","text":"get_initial_temperature(node::Node)\n\nReturn entry for the first index of values in Temperature of Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_lifestage-Tuple{Node, Type{<:Species}, Type{<:LifeStage}}","page":"API Reference","title":"GeneDrive.get_lifestage","text":"get_lifestage(node::Node, species::Type{<:Species}, life_stage::Type{<:LifeStage})\n\nReturn data for specified LifeStage of Species in Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_lifestages-Tuple{Node, Type{<:Species}}","page":"API Reference","title":"GeneDrive.get_lifestages","text":"get_lifestages(node::Node, species::Type{<:Species})\n\nReturn all data for all LifeStages of Species in Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_location-Tuple{Network}","page":"API Reference","title":"GeneDrive.get_location","text":"get_location(network::Network)\n\nReturn the coordinates of Network.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_location-Tuple{Node}","page":"API Reference","title":"GeneDrive.get_location","text":"get_location(node::Node)\n\nReturn the coordinates of Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_migration-Tuple{Network, Type{<:Species}}","page":"API Reference","title":"GeneDrive.get_migration","text":"get_migration(network::Network, species::Type{<:Species})\n\nReturn the migration characterizing each genotype and Lifestage for Species in Network.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_mortality-Tuple{Node, Type{<:Species}, Type{<:LifeStage}}","page":"API Reference","title":"GeneDrive.get_mortality","text":"get_mortality(node::Node, species::Type{<:Species}, life_stage::Type{<:LifeStage})\n\nReturn the temperature-sensitive mortality (μ_temperature_response) for the LifeStage of Species in Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_name-Tuple{Network}","page":"API Reference","title":"GeneDrive.get_name","text":"get_name(network::Network)\n\nReturn the name (symbol) of the Network object.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_name-Tuple{Node}","page":"API Reference","title":"GeneDrive.get_name","text":"get_name(node::Node)\n\nReturn the name (symbol) of the Node object.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_names-Tuple{Network}","page":"API Reference","title":"GeneDrive.get_names","text":"get_names(network::Network)\n\nReturn the names (symbols) of the nodes within the Network object.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_nodes-Tuple{Network}","page":"API Reference","title":"GeneDrive.get_nodes","text":"get_nodes(network::Network)\n\nReturn the Node object(s) contained in the Network object.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_organisms-Tuple{Network, Symbol}","page":"API Reference","title":"GeneDrive.get_organisms","text":"get_organisms(network::Network, node::Symbol)\n\nReturn vector of species populating the specified Node of Network.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_organisms-Tuple{Node}","page":"API Reference","title":"GeneDrive.get_organisms","text":"get_organisms(node::Node)\n\nReturn vector of species populating Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_previous_lifestage-Union{Tuple{T}, Tuple{Node, Type{<:Species}, Stage{T}}} where T<:LifeStage","page":"API Reference","title":"GeneDrive.get_previous_lifestage","text":"get_previous_lifestage(node::Node, species::Type{<:Species}, ::Stage{T}) where T <: LifeStage\n\nShow LifeStage dependency: return data for the LifeStage previous to the specified LifeStage of Species in Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_temperature-Tuple{Node}","page":"API Reference","title":"GeneDrive.get_temperature","text":"get_temperature(node::Node)\n\nReturn Temperature for Node. Object contains type and values.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_temperature_response-Tuple{Float64, AdultMortalityAbiodun, Float64}","page":"API Reference","title":"GeneDrive.get_temperature_response","text":"get_temperature_response(ctemp::Float64, response::AdultMortalityAbiodun, ::Float64)\n\nReturn q_temperature_response. Species: AnophelesGambiae, LifeStage: Male, Female. Source: Abiodun et al (2016).\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_temperature_response-Tuple{Float64, AdultMortalityMoustaid, Float64}","page":"API Reference","title":"GeneDrive.get_temperature_response","text":"get_temperature_response(ctemp::Float64, response::AdultMortalityMoustaid, ::Float64)\n\nReturn μ_temperature_response. Species: AedesAegypti, LifeStage: Male, Female. Source: El Moustaid et al (2019).\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_temperature_response-Tuple{Float64, AdultMortalityRossi, Float64}","page":"API Reference","title":"GeneDrive.get_temperature_response","text":"get_temperature_response(ctemp::Float64, response::AdultMortalityRossi, ::Float64)\n\nReturn μ_temperature_response. Species: AedesAegypti, LifeStage: Male, Female. Source: Rossi et al (2014).\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_temperature_response-Tuple{Float64, EggDurationAbiodun, Float64}","page":"API Reference","title":"GeneDrive.get_temperature_response","text":"get_temperature_response(ctemp::Float64, response::EggDurationAbiodun, ::Float64)\n\nReturn q_temperature_response. Species: AnophelesGambiae, LifeStage: Egg. Source: Abiodun et al (2016).\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_temperature_response-Tuple{Float64, EggDurationMoustaid, Float64}","page":"API Reference","title":"GeneDrive.get_temperature_response","text":"get_temperature_response(ctemp::Float64, response::EggDurationMoustaid, ::Float64)\n\nReturn q_temperature_response. Species: AedesAegypti, LifeStage: Egg. Source: El Moustaid et al (2019).\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_temperature_response-Tuple{Float64, EggDurationRossi, Float64}","page":"API Reference","title":"GeneDrive.get_temperature_response","text":"get_temperature_response(ctemp::Float64, response::EggDurationRossi, ::Float64)\n\nReturn q_temperature_response. Species: AedesAegypti, LifeStage: Egg. Source: Rossi et al (2014).\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_temperature_response-Tuple{Float64, EggMortalityAbiodun, Float64}","page":"API Reference","title":"GeneDrive.get_temperature_response","text":"get_temperature_response(ctemp::Float64, response::EggMortalityAbiodun, ::Float64)\n\nReturn q_temperature_response. Species: AnophelesGambiae, LifeStage: Egg. Source: Abiodun et al (2016).\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_temperature_response-Tuple{Float64, EggMortalityMoustaid, Float64}","page":"API Reference","title":"GeneDrive.get_temperature_response","text":"get_temperature_response(ctemp::Float64, response::EggMortalityMoustaid, duration::Float64)\n\nReturn μ_temperature_response. Species: AedesAegypti, LifeStage: Egg. Source: El Moustaid et al (2019).\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_temperature_response-Tuple{Float64, EggMortalityRossi, Float64}","page":"API Reference","title":"GeneDrive.get_temperature_response","text":"get_temperature_response(ctemp::Float64, response::EggMortalityRossi, ::Float64)\n\nReturn μ_temperature_response. Species: AedesAegypti, LifeStage: Egg. Source: Rossi et al (2014).\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_temperature_response-Tuple{Float64, LarvaDurationAbiodun, Float64}","page":"API Reference","title":"GeneDrive.get_temperature_response","text":"get_temperature_response(ctemp::Float64, response::LarvaDurationAbiodun, ::Float64)\n\nReturn q_temperature_response. Species: AnophelesGambiae, LifeStage: Larva. Source: Abiodun et al (2016).\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_temperature_response-Tuple{Float64, LarvaDurationMoustaid, Float64}","page":"API Reference","title":"GeneDrive.get_temperature_response","text":"get_temperature_response(ctemp::Float64, response::LarvaDurationMoustaid, ::Float64)\n\nReturn q_temperature_response. Species: AedesAegypti, LifeStage: Larva. Source: El Moustaid et al (2019).\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_temperature_response-Tuple{Float64, LarvaDurationRossi, Float64}","page":"API Reference","title":"GeneDrive.get_temperature_response","text":"get_temperature_response(ctemp::Float64, response::LarvaDurationRossi, ::Float64)\n\nReturn q_temperature_response. Species: AedesAegypti, LifeStage: Larva. Source: Rossi et al (2014).\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_temperature_response-Tuple{Float64, LarvaMortalityAbiodun, Float64}","page":"API Reference","title":"GeneDrive.get_temperature_response","text":"get_temperature_response(ctemp::Float64, response::LarvaMortalityAbiodun, ::Float64)\n\nReturn q_temperature_response. Species: AnophelesGambiae, LifeStage: Larva. Source: Abiodun et al (2016).\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_temperature_response-Tuple{Float64, LarvaMortalityMoustaid, Float64}","page":"API Reference","title":"GeneDrive.get_temperature_response","text":"get_temperature_response(ctemp::Float64, response::LarvaMortalityMoustaid, duration::Float64)\n\nReturn μ_temperature_response. Species: AedesAegypti, LifeStage: Larva. Source: El Moustaid et al (2019).\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_temperature_response-Tuple{Float64, LarvaMortalityRossi, Float64}","page":"API Reference","title":"GeneDrive.get_temperature_response","text":"get_temperature_response(ctemp::Float64, response::LarvaMortalityRossi, ::Float64)\n\nReturn μ_temperature_response. Species: AedesAegypti, LifeStage:, larval stage. Source: Rossi et al (2014).\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_temperature_response-Tuple{Float64, NoResponse, Float64}","page":"API Reference","title":"GeneDrive.get_temperature_response","text":"get_temperature_response(::Float64, response::NoResponse, ::Float64) = response.baseline_value\n\nReturn NoResponse data (model without temperature response).\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_temperature_response-Tuple{Float64, PupaDurationAbiodun, Float64}","page":"API Reference","title":"GeneDrive.get_temperature_response","text":"get_temperature_response(ctemp::Float64, response::PupaDurationAbiodun, ::Float64)\n\nReturn q_temperature_response. Species: AnophelesGambiae, LifeStage: Pupa. Source: Abiodun et al (2016).\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_temperature_response-Tuple{Float64, PupaDurationMoustaid, Float64}","page":"API Reference","title":"GeneDrive.get_temperature_response","text":"get_temperature_response(ctemp::Float64, response::PupaDurationMoustaid, ::Float64)\n\nReturn q_temperature_response. Species: AedesAegypti, LifeStage: Pupa. Source: El Moustaid et al (2019).\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_temperature_response-Tuple{Float64, PupaDurationRossi, Float64}","page":"API Reference","title":"GeneDrive.get_temperature_response","text":"get_temperature_response(ctemp::Float64, response::PupaDurationRossi, ::Float64)\n\nReturn q_temperature_response. Species: AedesAegypti, LifeStage: Pupa. Source: Rossi et al (2014) and Poletti et al (2011) Table 1.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_temperature_response-Tuple{Float64, PupaMortalityAbiodun, Float64}","page":"API Reference","title":"GeneDrive.get_temperature_response","text":"get_temperature_response(ctemp::Float64, response::PupaMortalityAbiodun, ::Float64)\n\nReturn q_temperature_response. Species: AnophelesGambiae, LifeStage: Pupa. Source: Abiodun et al (2016).\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_temperature_response-Tuple{Float64, PupaMortalityMoustaid, Float64}","page":"API Reference","title":"GeneDrive.get_temperature_response","text":"get_temperature_response(ctemp::Float64, response::PupaMortalityMoustaid, duration::Float64)\n\nReturn μ_temperature_response. Species: AedesAegypti, LifeStage: Pupa. Source: El Moustaid et al (2019).\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_temperature_response-Tuple{Float64, PupaMortalityRossi, Float64}","page":"API Reference","title":"GeneDrive.get_temperature_response","text":"get_temperature_response(ctemp::Float64, response::PupaMortalityRossi, ::Float64)\n\nReturn μ_temperature_response. Species: AedesAegypti, LifeStage: Pupa. Source: Rossi et al (2014).\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_temperature_response-Tuple{Float64, TemperatureResponse}","page":"API Reference","title":"GeneDrive.get_temperature_response","text":"get_temperature_response(ctemp::Float64, response::TemperatureResponse)\n\nReturn TemperatureResponse data (model with temperature response).\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_temperature_value-Tuple{ConstantTemperature, Float64, Any}","page":"API Reference","title":"GeneDrive.get_temperature_value","text":"get_temperature_value(temperature_model::ConstantTemperature, temp_value_from_inputs::Float64, t)\n\nReturn value of temperature in °C for specifed time step. Accounts for perturbations to baseline temperature model where applicable.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_temperature_value-Tuple{SinusoidalTemperature, Float64, Any}","page":"API Reference","title":"GeneDrive.get_temperature_value","text":"get_temperature_value(temperature_model::SinusoidalTemperature, temp_value_from_inputs::Float64, t)\n\nReturn value of temperature in °C for specifed time step. Accounts for perturbations to baseline temperature model where applicable.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_temperature_value-Tuple{TimeSeriesTemperature, Float64, Any}","page":"API Reference","title":"GeneDrive.get_temperature_value","text":"get_temperature_value(temperature_model::TimeSeriesTemperature, temp_value_from_inputs::Float64, t)\n\nReturn value of temperature in °C for specifed time step. Perturbations to baseline temperature, where applicable, should be directly added to time series prior to running model.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_wildtype-Tuple{Network, Node, Type{<:Species}}","page":"API Reference","title":"GeneDrive.get_wildtype","text":"get_wildtype(network::Network, node::Node, species::Type{<:Species})\n\nReturn the index of the wildtype genotype in Genetics for Species in Node of Network.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.get_wildtype-Tuple{Node, Type{<:Species}}","page":"API Reference","title":"GeneDrive.get_wildtype","text":"get_wildtype(node::Node, species::Type{<:Species})\n\nReturn the index of the wildtype genotype in Genetics for Species in Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.init_network!-Tuple{Network}","page":"API Reference","title":"GeneDrive.init_network!","text":"init_network!(network::Network)\n\nReturn initialized Network.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.init_node!-Tuple{Node}","page":"API Reference","title":"GeneDrive.init_node!","text":"init_node!(node::Node)\n\nReturn initialized Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.make_organisms-Tuple{Type{<:Species}, Genetics, OrderedCollections.OrderedDict}","page":"API Reference","title":"GeneDrive.make_organisms","text":"make_organisms(species::Type{<:Species},genetics::Genetics,stages::DataStructures.OrderedDict)\n\nReturn Organism object.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.plot_decision_mcr_females-Tuple{Any}","page":"API Reference","title":"GeneDrive.plot_decision_mcr_females","text":"plot_decision_mcr_females(sol)\n\nReturn visualization of adult female population dynamics across all genotypes.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.plot_decision_mendelian_females-Tuple{Any}","page":"API Reference","title":"GeneDrive.plot_decision_mendelian_females","text":"plot_decision_mendelian_females(sol)\n\nReturn visualization of adult female population dynamics across all genotypes.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.plot_decision_ridl_females-Tuple{Any}","page":"API Reference","title":"GeneDrive.plot_decision_ridl_females","text":"plot_decision_ridl_females(sol)\n\nReturn visualization of adult female population dynamics across all genotypes.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.plot_decision_wolbachia_females-Tuple{Any}","page":"API Reference","title":"GeneDrive.plot_decision_wolbachia_females","text":"plot_decision_wolbachia_females(sol)\n\nReturn visualization of adult female population dynamics across all genotypes.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.plot_dynamic_mcr_females-Tuple{Node, Any}","page":"API Reference","title":"GeneDrive.plot_dynamic_mcr_females","text":"plot_dynamic_mcr_females(node::Node, sol)\n\nReturn visualization of adult female population dynamics across all genotypes.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.plot_dynamic_mendelian_females-Tuple{Node, Any}","page":"API Reference","title":"GeneDrive.plot_dynamic_mendelian_females","text":"plot_dynamic_mendelian_females(node::Node, sol)\n\nReturn visualization of adult female population dynamics across all genotypes.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.plot_dynamic_ridl_females-Tuple{Node, Any}","page":"API Reference","title":"GeneDrive.plot_dynamic_ridl_females","text":"plot_dynamic_ridl_females(node::Node, sol)\n\nReturn visualization of adult female population dynamics across all genotypes.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.plot_dynamic_wolbachia_females-Tuple{Node, Any}","page":"API Reference","title":"GeneDrive.plot_dynamic_wolbachia_females","text":"plot_dynamic_wolbachia_females(node::Node, sol)\n\nReturn visualization of adult female population dynamics across all genotypes.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.population_model_network-NTuple{4, Any}","page":"API Reference","title":"GeneDrive.population_model_network","text":"population_model_network(du, u, (network, inputs), t)\n\nSolve network implementation of dynamic population model.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.population_model_node-NTuple{4, Any}","page":"API Reference","title":"GeneDrive.population_model_node","text":"population_model_node(du, u, (network, inputs), t)\n\nSolve node implementation of dynamic population model.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.solve_decision_model","page":"API Reference","title":"GeneDrive.solve_decision_model","text":"solve_decision_model(model::JuMP.Model, objective_function::Nothing=nothing; kwargs...)\n\nSolve mathematical program using default objective function @objective(model, Min, 0). This permits comparison to dynamic population model output.\n\n\n\n\n\n","category":"function"},{"location":"api/#GeneDrive.solve_dynamic_model-Tuple{Network, Any, Any}","page":"API Reference","title":"GeneDrive.solve_dynamic_model","text":"solve_dynamic_model(network::Network, algorithm, tspan)\n\nReturn ODE model solution for network problem with no releases.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.solve_dynamic_model-Tuple{Network, Union{Vector{ProportionalRelease}, Vector{Release}}, Any, Any}","page":"API Reference","title":"GeneDrive.solve_dynamic_model","text":"solve_dynamic_model(network::Network, releases::Union{Vector{Release},Vector{ProportionalRelease}}, algorithm, tspan)\n\nReturn ODE model solution for network problem with releases.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.solve_dynamic_model-Tuple{Network, Union{Vector{ProportionalRelease}, Vector{Release}}, Vector{TemperatureShockData}, Any, Any}","page":"API Reference","title":"GeneDrive.solve_dynamic_model","text":"solve_dynamic_model(network::Network, releases::Union{Vector{Release},Vector{ProportionalRelease}}, shocks::Vector{TemperatureShockData}, algorithm, tspan)\n\nReturn ODE model solution for network problem with releases and temperature shocks.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.solve_dynamic_model-Tuple{Network, Vector{TemperatureShockData}, Any, Any}","page":"API Reference","title":"GeneDrive.solve_dynamic_model","text":"solve_dynamic_model(network::Network, shocks::Vector{TemperatureShockData}, algorithm, tspan)\n\nReturn ODE model solution for network problem with temperature shocks.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.solve_dynamic_model-Tuple{Node, Any, Any}","page":"API Reference","title":"GeneDrive.solve_dynamic_model","text":"solve_dynamic_model(node::Node, algorithm, tspan)\n\nReturn ODE model solution for single node problem with no releases.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.solve_dynamic_model-Tuple{Node, TemperatureShockData, Any, Any}","page":"API Reference","title":"GeneDrive.solve_dynamic_model","text":"solve_dynamic_model(node::Node, shocks::TemperatureShockData, algorithm, tspan)\n\nReturn ODE model solution for single node problem with temperature shocks.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.solve_dynamic_model-Tuple{Node, Union{Vector{ProportionalRelease}, Vector{Release}}, Any, Any}","page":"API Reference","title":"GeneDrive.solve_dynamic_model","text":"solve_dynamic_model(node::Node, releases::Union{Vector{Release},Vector{ProportionalRelease}}, algorithm, tspan)\n\nReturn ODE model solution for single node problem with releases.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.solve_dynamic_model-Tuple{Node, Union{Vector{ProportionalRelease}, Vector{Release}}, TemperatureShockData, Any, Any}","page":"API Reference","title":"GeneDrive.solve_dynamic_model","text":"solve_dynamic_model(node::Node, releases::Union{Vector{Release},Vector{ProportionalRelease}}, shocks::TemperatureShockData, algorithm, tspan)\n\nReturn ODE model solution for single node problem with releases and temperature shocks.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.temperature_effect-Tuple{Float64, Any}","page":"API Reference","title":"GeneDrive.temperature_effect","text":"temperature_effect(ctemp::Float64, stage)\n\nReturn effect of temperature on organism vital rates (mortality, duration = μ_temperature_response, q_temperature_response).\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_density!-Union{Tuple{T}, Tuple{Node, Type{<:Species}, Type{T}}} where T<:LifeStage","page":"API Reference","title":"GeneDrive.update_density!","text":"update_density!(node::Node, species::Type{<:Species}, ::Type{T}; new_density::Density) where T <: LifeStage\n\nUpdate both the functional form and parameterization of the density dependence model for LifeStage of Species in Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_density!-Union{Tuple{T}, Tuple{OrderedCollections.OrderedDict, Type{T}, Density}} where T<:LifeStage","page":"API Reference","title":"GeneDrive.update_density!","text":"update_density!(stages::DataStructures.OrderedDict,lifestage::Type{T},new_density::Density) where {T <: LifeStage}\n\nUpdate both the functional form and parameterization of the density dependence model for LifeStage.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_density_model-Union{Tuple{T}, Tuple{Node, Type{<:Species}, Type{T}}} where T<:LifeStage","page":"API Reference","title":"GeneDrive.update_density_model","text":"update_density_model(node::Node, species::Type{<:Species}, ::Type{T}; new_density_model::Density) where T <: LifeStage\n\nUpdate the functional form of the density dependence model for LifeStage of Species in Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_density_parameter-Union{Tuple{T}, Tuple{Node, Type{<:Species}, Type{T}}} where T<:LifeStage","page":"API Reference","title":"GeneDrive.update_density_parameter","text":"update_density_parameter(node::Node, species::Type{<:Species}, ::Type{T}; new_param_value::Float64) where T <: LifeStage\n\nUpdate the parameterization of the density dependence model for LifeStage of Species in Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_duration-Tuple{Node, Type{<:Species}, Type{<:LifeStage}, Any}","page":"API Reference","title":"GeneDrive.update_duration","text":"update_duration(node::Node, species::Type{<:Species}, life_stage::Type{<:LifeStage}, new_q)\n\nUpdate the temperature-sensitive duration (q_temperature_response) for the LifeStage of Species in Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_egg_duration-Tuple{OrderedCollections.OrderedDict, Float64}","page":"API Reference","title":"GeneDrive.update_egg_duration","text":"update_egg_duration(stages::DataStructures.OrderedDict, vital_rate::Float64)\n\nReturn updated duration for Egg stage. Note: Exclusively applicable to NoResponse temperature type.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_egg_mortality-Tuple{OrderedCollections.OrderedDict, Float64}","page":"API Reference","title":"GeneDrive.update_egg_mortality","text":"update_egg_mortality(stages::DataStructures.OrderedDict, vital_rate::Float64)\n\nReturn updated mortality for Egg stage. Note: Exclusively applicable to NoResponse temperature type.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_female_mortality-Tuple{OrderedCollections.OrderedDict, Float64}","page":"API Reference","title":"GeneDrive.update_female_mortality","text":"update_female_mortality(stages::DataStructures.OrderedDict, vital_rate::Float64)\n\nReturn updated mortality for Female stage. Note: Exclusively applicable to NoResponse temperature type.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_genetics-Tuple{Node, Type{<:Species}, Any}","page":"API Reference","title":"GeneDrive.update_genetics","text":"update_genetics(node::Node, species::Type{<:Species}, new_genetics)\n\nUpdate Genetics data for Species in Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_genetics_S-Tuple{Node, Type{<:Species}, Vector{Float64}}","page":"API Reference","title":"GeneDrive.update_genetics_S","text":"update_genetics_S(node::Node, species::Type{<:Species}, new_sigma::Array{Float64,1})\n\nUpdate S data in Genetics for Species in Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_genetics_Β-Tuple{Node, Type{<:Species}, Vector{Float64}}","page":"API Reference","title":"GeneDrive.update_genetics_Β","text":"update_genetics_Β(node::Node, species::Type{<:Species}, new_beta::Array{Float64,1})\n\nUpdate Β data in Genetics for Species in Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_genetics_Η-Tuple{Any, Vector{Float64}}","page":"API Reference","title":"GeneDrive.update_genetics_Η","text":"update_genetics_Η(gene_data, new_eta::Array{Float64,1})\n\nUpdate Η data in Genetics. Helper function.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_genetics_Η-Tuple{Node, Type{<:Species}, Vector{Float64}}","page":"API Reference","title":"GeneDrive.update_genetics_Η","text":"update_genetics_Η(node::Node, species::Type{<:Species}, new_eta::Array{Float64,1})\n\nUpdate Η data in Genetics for Species in Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_genetics_Ω-Tuple{Any, Vector{Float64}}","page":"API Reference","title":"GeneDrive.update_genetics_Ω","text":"update_genetics_Ω(gene_data, new_omega::Array{Float64,1})\n\nUpdate Ω data in Genetics. Helper function.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_genetics_Ω-Tuple{Node, Type{<:Species}, Vector{Float64}}","page":"API Reference","title":"GeneDrive.update_genetics_Ω","text":"update_genetics_Ω(node::Node, species::Type{<:Species}, new_omega::Array{Float64,1})\n\nUpdate Ω data in Genetics for Species in Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_larva_duration-Tuple{OrderedCollections.OrderedDict, Float64}","page":"API Reference","title":"GeneDrive.update_larva_duration","text":"update_larva_duration(stages::DataStructures.OrderedDict, vital_rate::Float64)\n\nReturn updated duration for Larva stage. Note: Exclusively applicable to NoResponse temperature type.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_larva_mortality-Tuple{OrderedCollections.OrderedDict, Float64}","page":"API Reference","title":"GeneDrive.update_larva_mortality","text":"update_larva_mortality(stages::DataStructures.OrderedDict, vital_rate::Float64)\n\nReturn updated mortality for Larva stage. Note: Exclusively applicable to NoResponse temperature type.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_male_mortality-Tuple{OrderedCollections.OrderedDict, Float64}","page":"API Reference","title":"GeneDrive.update_male_mortality","text":"update_male_mortality(stages::DataStructures.OrderedDict, vital_rate::Float64)\n\nReturn updated mortality for Male stage. Note: Exclusively applicable to NoResponse temperature type.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_migration-Tuple{Network, Type{<:Species}, Any}","page":"API Reference","title":"GeneDrive.update_migration","text":"update_migration(network::Network, species::Type{<:Species}, new_migration)\n\nUpdate the migration characterizing each genotype and Lifestage for Species in Network.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_mortality-Tuple{Node, Type{<:Species}, Type{<:LifeStage}, Any}","page":"API Reference","title":"GeneDrive.update_mortality","text":"update_mortality(node::Node, species::Type{<:Species}, life_stage::Type{<:LifeStage}, new_μ)\n\nUpdate the temperature-sensitive mortality (μ_temperature_response) for the LifeStage of Species in Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_organism-Tuple{Network, Symbol, Any}","page":"API Reference","title":"GeneDrive.update_organism","text":"update_organism(network::Network, node::Symbol, new_species)\n\nUpdate the species populating the specified Node of Network.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_organism-Tuple{Node, Any}","page":"API Reference","title":"GeneDrive.update_organism","text":"update_organism(node::Node, new_species)\n\nUpdate the species populating Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_population_size-Tuple{OrderedCollections.OrderedDict, Int64}","page":"API Reference","title":"GeneDrive.update_population_size","text":"update_population_size(stages::DataStructures, Stage}, new_popsize::Int64)\n\nReturn updated population size. Note: new_popsize argument refers specifically to the Female population; if e.g. new_popsize = 500, the full adult population (Females and Males) will be 500*2.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_pupa_duration-Tuple{OrderedCollections.OrderedDict, Float64}","page":"API Reference","title":"GeneDrive.update_pupa_duration","text":"update_pupa_duration(stages::DataStructures.OrderedDict, vital_rate::Float64)\n\nReturn updated duration for Pupa stage. Note: Exclusively applicable to NoResponse temperature type.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_pupa_mortality-Tuple{OrderedCollections.OrderedDict, Float64}","page":"API Reference","title":"GeneDrive.update_pupa_mortality","text":"update_pupa_mortality(stages::DataStructures.OrderedDict, vital_rate::Float64)\n\nReturn updated mortality for Pupa stage. Note: Exclusively applicable to NoResponse temperature type.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_temperature-Tuple{Node, Type{<:ConstantTemperature}, Float64}","page":"API Reference","title":"GeneDrive.update_temperature","text":"update_temperature(node::Node, temp_type::Type{<:ConstantTemperature}, new_temperature::Float64)\n\nUpdate the type and values of Temperature for Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_temperature-Tuple{Node, Type{<:SinusoidalTemperature}, Vector{Float64}}","page":"API Reference","title":"GeneDrive.update_temperature","text":"update_temperature(node::Node, temp_type::Type{<:SinusoidalTemperature}, new_temperature::Vector{Float64})\n\nUpdate the type and values of Temperature for SinusoidalTemperature in Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#GeneDrive.update_temperature-Tuple{Node, Type{<:TimeSeriesTemperature}, Vector{Float64}}","page":"API Reference","title":"GeneDrive.update_temperature","text":"update_temperature(node::Node, temp_type::Type{<:TimeSeriesTemperature}, new_temperature::Vector{Float64})\n\nUpdate the type and values of Temperature for TimeSeriesTemperature in Node.\n\n\n\n\n\n","category":"method"},{"location":"api/#api","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"customization_userguide/","page":"Customization","title":"Customization","text":"Modules = [GeneDrive]\nPages   = [\"customization_userguide.md\"]","category":"page"},{"location":"customization_userguide/#Customization","page":"Customization","title":"Customization","text":"","category":"section"},{"location":"customization_userguide/","page":"Customization","title":"Customization","text":"[Describe extensibility & provide examples, explain how to contribute] ","category":"page"},{"location":"decision_tutorials/","page":"Decision Model","title":"Decision Model","text":"Modules = [GeneDrive]\nPages   = [\"decision_tutorials.md\"]","category":"page"},{"location":"decision_tutorials/#decision_model","page":"Decision Model","title":"Decision Model","text":"","category":"section"},{"location":"decision_tutorials/","page":"Decision Model","title":"Decision Model","text":"The following shows how to build and solve optimization problems in GeneDrive.jl. Decision models allow us to determine the best (optimal) strategy for achieving a goal (objective), taking into account the limitations (constraints) of our system of interest. ","category":"page"},{"location":"decision_tutorials/","page":"Decision Model","title":"Decision Model","text":"To set up the decision model, it is necessary to define an additional component for our data model: our problem's operational limitations (constraints). Operational constraints enter the simulation as fields of the ReleaseStrategy struct and are defined per node. View struct fields by running: ","category":"page"},{"location":"decision_tutorials/","page":"Decision Model","title":"Decision Model","text":"julia> ? \nhelp?> ReleaseStrategy","category":"page"},{"location":"decision_tutorials/","page":"Decision Model","title":"Decision Model","text":"Biological constraints are pre-defined within the decision model. For brevity, we will specify our example operational constraints on top of the node3 data model created previously. ","category":"page"},{"location":"decision_tutorials/","page":"Decision Model","title":"Decision Model","text":"using GeneDrive\n\nspecies = AedesAegypti \ngenetics = genetics_ridl()\nenviro_response = stages_rossi()\nupdate_population_size(enviro_response, 500)\norganisms = make_organisms(species, genetics, enviro_response)\ntemperature = example_temperature_timeseries\ncoordinates3 = (16.9203, 145.7710)\nnode3 = Node(:Cairns, organisms, temperature, coordinates3)\nrelease_genotype = get_homozygous_modified(node3, species)\ntspan = (1,365);","category":"page"},{"location":"decision_tutorials/","page":"Decision Model","title":"Decision Model","text":"# Define constraints using desired fields (re-use `release_genotype`)\nnode3_strategy = ReleaseStrategy(release_this_gene_index = release_genotype, \n    release_this_life_stage = Male, release_start_time = 7, \n    release_size_max_per_timestep = 1000)\n\n# Assign constraints to dict of nodes \nmystrategy = Dict(1 => node3_strategy)\n\n# Build the optimization problem (re-use `node3`, `tspan`)\nprob = create_decision_model(node3, tspan; node_strategy = mystrategy);","category":"page"},{"location":"decision_tutorials/","page":"Decision Model","title":"Decision Model","text":"To solve the decision model as an optimization, a goal (objective) must be supplied. However, even in the absence of an objective function we can derive useful information: without an objective, the solution method auto-selected by GeneDrive.jl acts as a nonlinear solver and allows us to compare the behavior of our dynamic and decision models. ","category":"page"},{"location":"decision_tutorials/","page":"Decision Model","title":"Decision Model","text":"# Solve \nsol = solve_decision_model(prob);\n\n# Format all results for analysis \nresults = format_decision_model_results(sol);","category":"page"},{"location":"decision_tutorials/","page":"Decision Model","title":"Decision Model","text":"To visualize a subset of the results, run plot_decision_ridl_females(sol). Because no objective function was specified, this output should qualitatively match those from the dynamic model when no intervention is conducted (i.e. when using the same data model, and no RIDL release object is passed to solve_dynamic_model).  ","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"Modules = [GeneDrive]\nPages   = [\"features.md\"]","category":"page"},{"location":"features/#features","page":"Features","title":"Design","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"GeneDrive.jl is predicated on composability. This system design principle allows specific user requirements to be met by mixing and matching modular components (or adding new ones). Because environmental variation - not to mention biological and genetic diversity - can be expressed in many forms, the \"composability\" of GeneDrive.jl means that the features described below may be selected, assembled, and augmented to develop many unique scientific explorations.   ","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"Feature modularity in GeneDrive.jl extends to solution methods: the dynamic model is built on top of DifferentialEquations.jl, enabling users to experiment with the robust suite of solvers in that package. The decision model employs JuMP.jl and can be run using a plethora of free as well as paid solution algorithms for nonlinear and mixed integer problems. Once built, the same data model can be evaluated using either ODE or optimization approaches with no further customization required.  ","category":"page"},{"location":"features/#climate","page":"Features","title":"Climate","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"To enable experimentation with alternative environmental assumptions, three categories or \"subtypes\" of Temperature (°C) inputs are defined in the GeneDrive.jl data model: ","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"ConstantTemperature creates a constant environment for the duration of a simulation: ConstantTemperature(27.0). \nSinusoidalTemperature furnishes an idealized, seasonally fluctuating temperature regime according to user-supplied values for amplitude, periodicity, time period, and mean: SinusoidalTemperature(4.75, 2, 365, 20.75). \nTimeSeriesTemperature is applicable for empirical data: TimeSeriesTemperature([vector_of_example_data]).   ","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"Beyond increases in the average trend that can be accommodated within the three Temperature subtypes above, GeneDrive.jl accommodates heatwaves and cold snaps via TemperatureShockData that imposes time-bound increases or decreases in °C, e.g., augmenting the ambient temperature by 2°C between days 21 and 25 and again between days 37 and 42 in the location of interest: TemperatureShockData(node,[(21.0, 25.0),(37.0,42.0)],2.0).","category":"page"},{"location":"features/#biology","page":"Features","title":"Biology","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"Lifecycle dynamics vary among species thanks to population-specific vital rates and regulatory mechanisms as well as ecological and other factors. The Organism type in GeneDrive.jl is defined by the LifeStages and Genetics particular to a given study species, and is categorized by Species. To view the species already defined in the package, run: ","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"julia> ? \nhelp?> Species ","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"GeneDrive.jl draws on the thermal biology literature to provide empirically-derived functions that characterize species-appropriate temperature responses. The following - named for the first author of the scientific publication from which they were sourced - are fully parameterized GeneDrive.jl data models: ","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"stages_rossi() and stages_moustaid(), applicable to AedesAegypti\nstages_abiodun(), applicable to AnophelesGambiae","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"To permit experimentation with alternative field or laboratory-sourced vital rates, the pre-defined GeneDrive.jl data model stages_noresponse() - named to indicate that no functional response to temperature is assumed - can be populated with stage-specific information using package accessor functions. See API Reference. ","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"Stage-specific regulatory mechanisms and their contributions to population dynamics can also be explored. See Density models under the type DensityDependence.","category":"page"},{"location":"features/#genetics","page":"Features","title":"Genetics","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"The Genetics type in GeneDrive.jl defines the likelihood with which an organism will produce offspring and pass on its genetic material. This likelihood is currently assumed to be equivalent for all wildtype organisms, following Mendelian inheritance principles. However, genetic-based methods of biocontrol - a category that ranges from actual modification to bacterial infection - alter natural inheritance patterns, with affected genotypes having a greater or lesser ability to propagate. ","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"Beyond this, Genetics data includes information unique to modified genotypes including fertility rates, sex ratios, and varied fitness costs (e.g. how mortality rates for those organisms are biased with respect to their wild counterparts). Together with the vital rates defined in LifeStages, Genetics data is used to create the Organisms that populate a GeneDrive.jl experiment. The following are fully parameterized data models included in the package: ","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"genetics_mendelian(): For wildtypes. \ngenetics_ridl(): For the biocontrol technology RIDL (suppression), developed by Oxitec. \ngenetics_wolbachia(): For two biocontrol approaches (i.e., suppression and replacement) that infect organisms with Wolbachia (multiple existing strains).\ngenetics_mcr(): For a gene drive biocontrol technology (replacement) tested exclusively in laboratory environnments. ","category":"page"},{"location":"features/#Geography","page":"Features","title":"Geography","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"Connectivity between geographic locations informs population dynamics by allowing organisms to migrate and spatially propagate genetic material. Study species defined by the GeneDrive.jl data model may inhabit a Node - a single homogenous habitat - or a heterogeneous Network. The Network is a collection of interconnected Nodes, each of which are geolocated by latitude/longitude coordinates and may exhibit environmental differences. See the data model tutorial for an example of how to construct both Node and Network geographies. ","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"Movement between all Node locations in a Network is uniquely specified for each species, life stage, and genotype using assign_migration!. See the data model tutorial for an example implementation. This feature enables users to account for a diversity of demographic and genetic migration tendencies as well as exogenous factors, facilitating scientific investigation in an important area. ","category":"page"},{"location":"features/#Interventions","page":"Features","title":"Interventions","text":"","category":"section"},{"location":"features/","page":"Features","title":"Features","text":"Biological control experiments are conducted in GeneDrive.jl by adding modified organisms at periodic intervals using the Release object. In the dynamic model, such interventions are defined by the user when solving the problem. In the decision model, feasible interventions are optimized according to the operational constraints and objective function defined by the user. ","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"When specifying an intervention schedule in the dynamic model, fixed or variably-sized releases can occur at flexible intervals by entering the applicable Node, Species,LifeStage, genotype index, and timing (day of desired release).","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"Fixed release size: Release(node, AedesAegypti, Female, 1, [46.0, 53.0, 60.0, 67.0], 100)\nVariable release size:Release(node, AedesAegypti, Female, 1, [46.0, 53.0, 60.0, 67.0], [100, 150, 200, 250])","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"Alternatively, interventions may be conducted in an adaptive manner that directly accounts for the real-time size of the standing wildtype population. This is done using the ProportionalRelease approach. As above, information defining the Node, Species,LifeStage, genotype index, and timing is entered. However, instead of an Int64 (count) specifying the release size, a Float64 denotes the relative magnitude of the intervention with respect to the population of interest, which may be adult Males, Females, or both (\"All\"). In the examples below, release_times = [46.0, 53.0, 60.0, 67.0]:","category":"page"},{"location":"features/","page":"Features","title":"Features","text":"Proportional release, where release size is equivalent to standing population of Males at each release time: ProportionalRelease(node, AedesAegypti, Male, 1, release_times, 1.0, \"Males\")\nProportional release, where release size amounts to 50% of the combined standing population of Male and Female adults at each release time: ProportionalRelease(node, AedesAegypti, Male, 1, release_times, 0.5, \"All\")","category":"page"},{"location":"dynamic_tutorials/","page":"Dynamic Model","title":"Dynamic Model","text":"Modules = [GeneDrive]\nPages   = [\"dynamic_tutorials.md\"]","category":"page"},{"location":"dynamic_tutorials/#dynamic_model","page":"Dynamic Model","title":"Dynamic Model","text":"","category":"section"},{"location":"dynamic_tutorials/","page":"Dynamic Model","title":"Dynamic Model","text":"The following examples demonstrate how to create and run Ordinary Differential Equation (ODE) problems in GeneDrive.jl. Dynamic models allow us to understand the behavior of the system of interest; below, we see the effect of both environmental and then anthropogenic perturbations. ","category":"page"},{"location":"dynamic_tutorials/#environmental_dynamics","page":"Dynamic Model","title":"Environmental Dynamics","text":"","category":"section"},{"location":"dynamic_tutorials/","page":"Dynamic Model","title":"Dynamic Model","text":"First, we will characterize the impact of seasonal temperature fluctuations on our study population. This experiment uses the information from the node2 data model created in the previous example. ","category":"page"},{"location":"dynamic_tutorials/","page":"Dynamic Model","title":"Dynamic Model","text":"using GeneDrive\nusing OrdinaryDiffEq\nusing PlotlyJS\nspecies = AedesAegypti \ngenetics = genetics_mendelian()\nenviro_response = stages_rossi()\nupdate_population_size(enviro_response, 500)\norganisms = make_organisms(species, genetics, enviro_response)\ntemperature = example_temperature_timeseries\ncoordinates2 = (17.0966, 145.7747)\nnode2 = Node(:Gordonsvale, organisms, temperature, coordinates2);","category":"page"},{"location":"dynamic_tutorials/","page":"Dynamic Model","title":"Dynamic Model","text":"# Define the time horizon \ntspan = (1,365)\n\n# Select solver from the suite of available methods\nsolver = OrdinaryDiffEq.Tsit5()\n\n# Solve \nsol = solve_dynamic_model(node2, solver, tspan);\n\n# Format all results for analysis\nresults = format_dynamic_model_results(node2, sol)","category":"page"},{"location":"dynamic_tutorials/","page":"Dynamic Model","title":"Dynamic Model","text":"To visualize a subet of the results, run plot_dynamic_mendelian_females(node2, sol). For the AedesAegypti species modelled in this example, we are particularly interested in the dynamics of adult females because female mosquitoes are the vectors of disease. ","category":"page"},{"location":"dynamic_tutorials/","page":"Dynamic Model","title":"Dynamic Model","text":"Note that the solver is sourced from the robust DifferentialEquations.jl package (options here). If that package is not already in your local environment, run the following to select your preferred solution method: ","category":"page"},{"location":"dynamic_tutorials/","page":"Dynamic Model","title":"Dynamic Model","text":"julia> ]\n(v1.7) pkg> add OrdinaryDiffEq\njulia> using OrdinaryDiffEq","category":"page"},{"location":"dynamic_tutorials/#intervention_dynamics","page":"Dynamic Model","title":"Intervention Dynamics","text":"","category":"section"},{"location":"dynamic_tutorials/","page":"Dynamic Model","title":"Dynamic Model","text":"Here we model the dynamics of public health interventions that release genetically modified mosquitoes to replace or suppress wildtypes (mitigating the risk of disease spread). This experiment also accounts for the environmental dynamics we saw above. Importantly, the timing, size, sex, and genotype used for interventions varies according to the genetic tool. ","category":"page"},{"location":"dynamic_tutorials/","page":"Dynamic Model","title":"Dynamic Model","text":"The code below demonstrates how to set up the RIDL (Release of Insects with Dominant Lethal) intervention, therefore only male organisms that are homozygous for the modification are released.","category":"page"},{"location":"dynamic_tutorials/","page":"Dynamic Model","title":"Dynamic Model","text":"# Use new genetics\ngenetics = genetics_ridl();\n\n# Re-use other organismal data for brevity \norganisms = make_organisms(species, genetics, enviro_response);\n\n# Define a new location\ncoordinates3 = (16.9203, 145.7710)\nnode3 = Node(:Cairns, organisms, temperature, coordinates3);\n\n# Define the size and timing of releases \nrelease_size = 100;\nrelease_times = [4.0, 11.0, 18.0, 25.0, 32.0, 39.0, \n    46.0, 53.0, 60.0, 67.0];\n\n# The genotype to be released (apply helper function)\nrelease_genotype = get_homozygous_modified(node3, species)\n\n# Specify the sex of releases and create the `Release` object\nreleases_males = Release(node3, species, Male, release_genotype, \n    release_times, release_size);","category":"page"},{"location":"dynamic_tutorials/","page":"Dynamic Model","title":"Dynamic Model","text":"With the new problem now set up, we solve it and analyze the results: ","category":"page"},{"location":"dynamic_tutorials/","page":"Dynamic Model","title":"Dynamic Model","text":"# Solve (re-use solver and tspan from previous example)\nsol = solve_dynamic_model(node3, [releases_males], \n    solver, tspan);\n\n# Format all results for analysis \nresults = format_dynamic_model_results(node3, sol)","category":"page"},{"location":"dynamic_tutorials/","page":"Dynamic Model","title":"Dynamic Model","text":"To visualize a subet of the results, run plot_dynamic_ridl_females(node3, sol).","category":"page"},{"location":"optimization_userguide/","page":"Optimization","title":"Optimization","text":"Modules = [GeneDrive]\nPages   = [\"optimization_userguide.md\"]","category":"page"},{"location":"optimization_userguide/#Optimization","page":"Optimization","title":"Optimization","text":"","category":"section"},{"location":"optimization_userguide/","page":"Optimization","title":"Optimization","text":"[Describe more extensively, point to JuMP pages]","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = GeneDrive","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GeneDrive.jl is a Julia package designed for simulating biological dynamics and control. The current implementation focuses on genetic-based public health interventions that modify populations of disease vectors, including mosquitoes of the Aedes and Anopheles genera. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package furnishes a three-part framework for building and analyzing simulations wherein metapopulations are subject to anthropogenic and environmental change:  ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Data models that structure inputs to experimental setups and exploit the power of Julia's type system for multiple dispatch. \nDynamic models that build on the DifferentialEquations.jl platform.\nDecision models that employ JuMP.jl, the domain-specific modeling language for mathematical optimization embedded in Julia.","category":"page"},{"location":"#Installation-and-usage","page":"Home","title":"Installation and usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GeneDrive.jl will work with Julia version 1.7 and above. Add the package with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]\n(v1.7) pkg> add GeneDrive","category":"page"},{"location":"","page":"Home","title":"Home","text":"Begin using the package with: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using GeneDrive","category":"page"},{"location":"#What's-with-the-name?","page":"Home","title":"What's with the name?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Gene drives include both naturally occurring and synthetic genetic elements. They have been harnessed by scientists for potential use in biological control (e.g.: public health, agriculture, conservation). \"Drive\" simply refers to these genetic elements being inherited with a high probability. Thefore, their frequency in a population grows quickly - and at the expense of the wildtype population. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"While this package is not exclusively applicable to gene drive research, its name is a nod to this new technological horizon in biological control. ","category":"page"},{"location":"#Citing-GeneDrive.jl","page":"Home","title":"Citing GeneDrive.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"[Insert paper citation/bioarxiv link]","category":"page"},{"location":"datasetup_tutorials/","page":"Data Model","title":"Data Model","text":"Modules = [GeneDrive]\nPages   = [\"datasetup_tutorials.md\"]","category":"page"},{"location":"datasetup_tutorials/#data_model","page":"Data Model","title":"Data Model","text":"","category":"section"},{"location":"datasetup_tutorials/","page":"Data Model","title":"Data Model","text":"The first step in any empirical effort is to clean and organize the data. This is also true for computational experiments! GeneDrive.jl uses structs to enforce consistency, define relationships, and dynamically assign methods to data. ","category":"page"},{"location":"datasetup_tutorials/","page":"Data Model","title":"Data Model","text":"Importantly, the struct approach enables modularity: users can construct experiments in a \"building block\" fashion by assembling information that has already been stored as proper GeneDrive.jl inputs. The Features section outlines the environmental, biological, and genetic details that can be defined thanks to the data model.","category":"page"},{"location":"datasetup_tutorials/","page":"Data Model","title":"Data Model","text":"Once the information for an experiment has been organized using the data model, we are ready to:","category":"page"},{"location":"datasetup_tutorials/","page":"Data Model","title":"Data Model","text":"Save or share our data in a structured and reproducible way.\nCall Ordinary Differential Equation (ODE) solution methods on our data.\nCall optimization solution methods on our data. ","category":"page"},{"location":"datasetup_tutorials/","page":"Data Model","title":"Data Model","text":"The code below shows how to construct an example study population using data that is included with the package. ","category":"page"},{"location":"datasetup_tutorials/","page":"Data Model","title":"Data Model","text":"using GeneDrive\n\n# Select species type \nspecies = AedesAegypti \n\n# Define how genetic information is passed on \ngenetics = genetics_mendelian();\n\n# Choose functional form of environmental response for species life stages\nenviro_response = stages_rossi();\n\n# Update population size as desired\nupdate_population_size(enviro_response, 500); \n\n# Assemble organism\norganisms = make_organisms(species, genetics, enviro_response);","category":"page"},{"location":"datasetup_tutorials/","page":"Data Model","title":"Data Model","text":"To fully define an experiment, additional information is relevant: the spatial structure of the population, the ambient temperature of the habitat, and its geographic location should also be defined. The code below demonstrates how to do this; as above, it draws on pre-structured data from GeneDrive.jl.","category":"page"},{"location":"datasetup_tutorials/","page":"Data Model","title":"Data Model","text":"# Define temperature functional form and data \ntemperature = example_temperature_timeseries;\n\n# Specify the geographic coordinates \ncoordinates = (16.1820, 145.7210);\n\n# Define the spatial structure, name the location, and \"populate\" it \nnode1 = Node(:YorkeysKnob, organisms, temperature, coordinates);","category":"page"},{"location":"datasetup_tutorials/","page":"Data Model","title":"Data Model","text":"If the desired spatial structure is a network, we must also define migration rates for subsets of the population that move from node to node within that network. Migration is defined as a nested dictionary wherein the rate at which each genotype and lifestage moves between locations can be optionally specified. When migration rates are not defined for adjacent nodes or specific life stages (e.g., eggs) and genotypes, the default rate is set to zero.","category":"page"},{"location":"datasetup_tutorials/","page":"Data Model","title":"Data Model","text":"# Define a second node \ncoordinates2 = (17.0966, 145.7747);\nnode2 = Node(:Gordonsvale, organisms, temperature, coordinates2);\n\n# Create a network comprised of the two nodes \nnetwork = Network(:Queensland, node1, node2);\n\n# Specify that adult males and females of all genotypes move \nmigration_data = Dict( # node1 <-> node2\n    (\"Male\", \"AA\") => Dict((:YorkeysKnob, :Gordonsvale) => 0.02,\n                           (:Gordonsvale, :YorkeysKnob) => 0.02),\n    (\"Male\", \"Aa\") => Dict((:YorkeysKnob, :Gordonsvale) => 0.02,\n                            (:Gordonsvale, :YorkeysKnob) => 0.02),\n    (\"Male\", \"aa\") => Dict((:YorkeysKnob, :Gordonsvale) => 0.02,\n                            (:Gordonsvale, :YorkeysKnob) => 0.02),\n    (\"Female\", \"AA\") => Dict((:YorkeysKnob, :Gordonsvale) => 0.02,\n                            (:Gordonsvale, :YorkeysKnob) => 0.02),\n    (\"Female\", \"Aa\") => Dict((:YorkeysKnob, :Gordonsvale) => 0.02,\n                            (:Gordonsvale, :YorkeysKnob) => 0.02),\n    (\"Female\", \"aa\") => Dict((:YorkeysKnob, :Gordonsvale) => 0.02,\n                            (:Gordonsvale, :YorkeysKnob) => 0.02)\n);\n\n# Add migration to the network object \nassign_migration!(network, migration_data, species);","category":"page"}]
}
